services:
  db:
    restart: always
    image: postgres:13-alpine
    container_name: ml_db
    ports:
      - "5423:5432"
    networks:
      - backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgres-init:/docker-entrypoint-initdb.d
      - ./pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5432", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 3
    env_file:
      - .env
  
  s3:
    restart: always
    image: minio/minio:RELEASE.2024-07-31T05-46-26Z
    container_name: mlflow_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - frontend
      - backend
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ':9001' --address ':9000'
    volumes:
      - ./minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  s3_setup:
    image: minio/mc:RELEASE.2024-08-13T05-33-17Z
    container_name: s3_setup
    depends_on:
      - s3
    networks:
      - backend
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: ["/bin/sh", "-c"]
    command: 
      - |
        mc alias set myminio http://s3:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
        mc admin user svcacct add --access-key ${MLFLOW_AWS_ACCESS_KEY_ID} --secret-key ${MLFLOW_AWS_SECRET_ACCESS_KEY} myminio ${MINIO_ROOT_USER}
        mc mb myminio/${MLFLOW_BUCKET_NAME}/artifacts
        mc mb myminio/labels-data/

  label_studio:
    stdin_open: true
    tty: true
    image: heartexlabs/label-studio:latest
    container_name: label_studio
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - frontend
      - backend
    ports:
      - "8080:8080"
    volumes:
      - ./labelstudio-data:/label-studio/data
    depends_on:
      - s3_setup
      - db

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jupyter
    restart: unless-stopped
    shm_size: '6g'
    env_file:
      - .env
    volumes:
      - ./jupyter-notebooks:/home/jupyter/notebooks
    ports:
      - "8888:8888"
    networks:
      - frontend
      - backend
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    runtime: nvidia

  mlflow_server:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.mlflow 
    image: mlflow_server
    container_name: mlflow_server
    depends_on:
      - db
      - s3_setup
    ports:
      - "5050:5000"
    networks:
      - frontend
      - backend
    volumes:
      - mlflow-data:/mlflow
    env_file:
      - .env
    environment:
      AWS_ACCESS_KEY_ID: ${MLFLOW_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_AWS_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: http://s3:9000
      MLFLOW_S3_IGNORE_TLS: "True"
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mlflow
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://${MLFLOW_BUCKET_NAME}/artifacts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
